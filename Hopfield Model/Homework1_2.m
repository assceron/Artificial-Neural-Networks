close all
clear all

N = 160;
numberOfPatterns = 5;

x1 = [[-1, -1, -1 ,-1, -1, -1, -1, -1, -1, -1],
       [-1, -1, -1 ,1, 1, 1, 1, -1, -1, -1],
       [-1, -1, 1 ,1, 1, 1, 1, 1, -1, -1],
       [-1, 1, 1 ,1, -1, -1, 1, 1, 1, -1],
       [-1, 1, 1 ,1, -1, -1, 1, 1, 1, -1],
       [-1, 1, 1 ,1, -1, -1, 1, 1, 1, -1],
       [-1, 1, 1 ,1, -1, -1, 1, 1, 1, -1],
       [-1, 1, 1 ,1, -1, -1, 1, 1, 1, -1],
       [-1, 1, 1 ,1, -1, -1, 1, 1, 1, -1],
       [-1, 1, 1 ,1, -1, -1, 1, 1, 1, -1],
       [-1, 1, 1 ,1, -1, -1, 1, 1, 1, -1],
       [-1, 1, 1 ,1, -1, -1, 1, 1, 1, -1],
       [-1, 1, 1 ,1, -1, -1, 1, 1, 1, -1],
       [-1, -1, 1 ,1, 1, 1, 1, 1, -1, -1],
       [-1, -1, -1 ,1, 1, 1, 1, -1, -1, -1],
       [-1, -1, -1 ,-1, -1, -1, -1, -1, -1, -1]];

x2 = [[-1, -1, -1, 1, 1, 1, 1, -1, -1 ,-1],
    [-1, -1, -1, 1, 1, 1, 1, -1, -1 ,-1],
    [-1, -1, -1, 1, 1, 1, 1, -1, -1 ,-1],
    [-1, -1, -1, 1, 1, 1, 1, -1, -1 ,-1],
    [-1, -1, -1, 1, 1, 1, 1, -1, -1 ,-1],
    [-1, -1, -1, 1, 1, 1, 1, -1, -1 ,-1],
    [-1, -1, -1, 1, 1, 1, 1, -1, -1 ,-1],
    [-1, -1, -1, 1, 1, 1, 1, -1, -1 ,-1],
    [-1, -1, -1, 1, 1, 1, 1, -1, -1 ,-1],
    [-1, -1, -1, 1, 1, 1, 1, -1, -1 ,-1],
    [-1, -1, -1, 1, 1, 1, 1, -1, -1 ,-1],
    [-1, -1, -1, 1, 1, 1, 1, -1, -1 ,-1],
    [-1, -1, -1, 1, 1, 1, 1, -1, -1 ,-1],
    [-1, -1, -1, 1, 1, 1, 1, -1, -1 ,-1],
    [-1, -1, -1, 1, 1, 1, 1, -1, -1 ,-1],
    [-1, -1, -1, 1, 1, 1, 1, -1, -1 ,-1]];

x3 = [[1, 1, 1, 1, 1, 1, 1, 1, -1, -1],
    [1, 1, 1, 1, 1, 1, 1, 1, -1, -1],
    [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1],
    [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1],
    [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1],
    [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1],
    [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1],
    [1, 1, 1, 1, 1, 1, 1, 1, -1, -1],
    [1, 1, 1, 1, 1, 1, 1, 1, -1, -1],
    [1, 1, 1, -1, -1, -1, -1, -1, -1, -1],
    [1, 1, 1, -1, -1, -1, -1, -1, -1, -1],
    [1, 1, 1, -1, -1, -1, -1, -1, -1, -1],
    [1, 1, 1, -1, -1, -1, -1, -1, -1, -1],
    [1, 1, 1, -1, -1, -1, -1, -1, -1, -1],
    [1, 1, 1, 1, 1, 1, 1, 1, -1, -1],
    [1, 1, 1, 1, 1, 1, 1, 1, -1, -1]];

x4 = [[-1, -1, 1, 1, 1, 1, 1, 1, -1 ,-1],
    [-1, -1, 1, 1, 1, 1, 1, 1, 1 ,-1],
    [-1, -1, -1, -1 , -1, -1, 1, 1, 1, -1],
    [-1, -1, -1, -1 , -1, -1, 1, 1, 1, -1],
    [-1, -1, -1, -1 , -1, -1, 1, 1, 1, -1],
    [-1, -1, -1, -1 , -1, -1, 1, 1, 1, -1],
    [-1, -1, -1, -1 , -1, -1, 1, 1, 1, -1],
    [-1, -1, 1, 1, 1, 1, 1, 1, -1 ,-1],
    [-1, -1, 1, 1, 1, 1, 1, 1, -1 ,-1],
     [-1, -1, -1, -1 , -1, -1, 1, 1, 1, -1],
    [-1, -1, -1, -1 , -1, -1, 1, 1, 1, -1],
    [-1, -1, -1, -1 , -1, -1, 1, 1, 1, -1],
    [-1, -1, -1, -1 , -1, -1, 1, 1, 1, -1],
    [-1, -1, -1, -1 , -1, -1, 1, 1, 1, -1],
    [-1, -1, 1, 1, 1, 1, 1, 1, 1 ,-1],
    [-1, -1, 1, 1, 1, 1, 1, 1, -1 ,-1]];

x5 = [[-1, 1, 1,-1,-1,-1,-1, 1, 1, -1],
    [-1, 1, 1,-1,-1,-1,-1, 1, 1, -1],
    [-1, 1, 1,-1,-1,-1,-1, 1, 1, -1],
    [-1, 1, 1,-1,-1,-1,-1, 1, 1, -1],
    [-1, 1, 1,-1,-1,-1,-1, 1, 1, -1],
    [-1, 1, 1,-1,-1,-1,-1, 1, 1, -1],
    [-1, 1, 1,-1,-1,-1,-1, 1, 1, -1],
    [-1, 1, 1, 1, 1, 1, 1, 1, 1, -1],
    [-1, 1, 1, 1, 1, 1, 1, 1, 1, -1],
    [-1, -1, -1, -1, -1 , -1, -1, 1, 1, -1],
    [-1, -1, -1, -1, -1 , -1, -1, 1, 1, -1],
    [-1, -1, -1, -1, -1 , -1, -1, 1, 1, -1],
    [-1, -1, -1, -1, -1 , -1, -1, 1, 1, -1],
    [-1, -1, -1, -1, -1 , -1, -1, 1, 1, -1],
    [-1, -1, -1, -1, -1 , -1, -1, 1, 1, -1],
    [-1, -1, -1, -1, -1 , -1, -1, 1, 1, -1]];

x1 = reshape(x1.',1,[]);
x2 = reshape(x2.',1,[]);
x3 = reshape(x3.',1,[]);
x4 = reshape(x4.',1,[]);
x5 = reshape(x5.',1,[]);
patterns = [x1; x2; x3; x4; x5];

toFeed1=[[1, -1, -1, 1, 1, 1, 1, -1, -1, 1], [1, -1, -1, 1, 1, 1, 1, -1, -1, 1], [1, -1, -1, 1, 1, 1, 1, -1, -1, 1], [1, -1, -1, 1, 1, 1, 1, -1, -1, 1], [1, -1, -1, 1, 1, 1, 1, -1, -1, 1], [1, -1, -1, 1, 1, 1, 1, -1, -1, 1], [1, -1, -1, 1, 1, 1, 1, -1, -1, 1], [1, -1, -1, -1, -1, -1, -1, -1, -1, 1], [1, -1, -1, -1, -1, 1, 1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, -1], [-1, -1, -1, -1, -1, -1, -1, 1, 1, -1]];
toFeed2=[[1, 1, -1, -1, -1, -1, -1, -1, 1, 1], [1, 1, -1, -1, -1, -1, -1, -1, -1, 1], [1, 1, 1, 1, 1, 1, -1, -1, -1, 1], [1, 1, 1, 1, 1, 1, -1, -1, -1, 1], [1, 1, 1, 1, 1, 1, -1, -1, -1, 1], [1, 1, 1, 1, 1, 1, -1, -1, -1, 1], [1, 1, 1, 1, 1, 1, -1, -1, -1, 1], [1, 1, -1, -1, -1, -1, -1, -1, 1, 1], [1, 1, -1, -1, -1, -1, -1, -1, 1, 1], [1, 1, 1, 1, 1, 1, -1, -1, -1, 1], [1, 1, 1, 1, 1, 1, -1, -1, -1, 1], [1, 1, 1, 1, 1, 1, -1, -1, -1, 1], [1, 1, 1, 1, 1, 1, -1, -1, -1, 1], [1, 1, 1, 1, 1, 1, -1, -1, -1, 1], [1, 1, -1, -1, -1, -1, -1, -1, -1, 1], [1, 1, -1, -1, -1, -1, -1, -1, 1, 1]];
toFeed3=[[1, 1, 1, 1, 1, 1, 1, 1, -1, -1], [1, 1, 1, 1, 1, 1, 1, 1, -1, -1], [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1], [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1], [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1], [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1], [-1, -1, -1, -1, -1, 1, 1, 1, -1, -1], [1, 1, 1, 1, 1, 1, 1, 1, -1, -1], [1, 1, 1, 1, 1, 1, 1, 1, -1, -1], [1, 1, 1, -1, -1, -1, -1, -1, -1, -1], [1, 1, 1, -1, -1, -1, -1, -1, -1, -1], [1, 1, 1, -1, -1, -1, -1, -1, -1, -1], [1, 1, 1, -1, -1, -1, -1, -1, -1, -1], [1, 1, 1, -1, -1, -1, -1, -1, -1, -1], [1, 1, 1, 1, 1, 1, 1, 1, -1, -1], [-1, -1, -1, -1, -1, -1, -1, -1, 1, 1]];

n1 = recognizeDigits(toFeed1, N, patterns);
n2 = recognizeDigits(toFeed2, N, patterns);
n3 = recognizeDigits(toFeed3, N, patterns);

function neurons = recognizeDigits(toFeed, N, patterns)
weights = initializeWeights_wii_zero(N, patterns);
toFeed = reshape(toFeed.', 1, []);
neurons = toFeed;
old_neurons = zeros(1,160);
i = 0;
while (~(old_neurons == neurons))
    old_neurons = neurons;
    for i=1:N
        %update of the neuron
        chosenNeuron = neurons(i);
        chosenWeights = weights(i,:);
        chosenNeuron = localField(chosenWeights,neurons);
        neurons(i) = mySign(chosenNeuron);
    end
end
fprintf("I reached a steady state! Check neurons!")
neurons = vec2mat(neurons,10)
end

function weights=initializeWeights_wii_zero(N, patterns)
    weights = zeros(N,N);
    for i=1:N
        for j=1:N
            weightValue = 0;
            weightValue = sum(patterns(:,i).*patterns(:,j));
            weights(i,j) = 1/N * weightValue;
            if (i==j)
                weights(i,j) = 0;
            end
        end
    end
end

function sign=mySign(number)
    if number >= 0
        sign = 1;
    else
        sign = -1;
    end
end

%local field computation
function b=localField(weights,neurons)
    b=weights*transpose(neurons);
end

function answer=contains(toFeed, patterns)
    answer = 0;
    for i=1:size(patterns)
        if (isequal(toFeed, patterns(i)))
            answer = 1;
        end
    end
end
